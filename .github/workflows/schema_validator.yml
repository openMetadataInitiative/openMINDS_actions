name: Schema Validator

on:
  workflow_call:
    inputs:
       branch:
         description: 'The branch of the submodule the workflow was triggered for'
         required: true
         type: string
       repository:
         description: 'The repository of the submodule the workflow was triggered for'
         required: true
         type: string

jobs:
  validate-schema:
    runs-on: ubuntu-latest
          
    steps:
      - name: Determine repository and branch
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "REPO=${{ github.event.pull_request.base.repo.full_name }}" >> "$GITHUB_OUTPUT"
            echo "BRANCH=${{ github.event.pull_request.base.ref }}" >> "$GITHUB_OUTPUT"
          else
            echo "REPO=${{ inputs.repository }}" >> "$GITHUB_OUTPUT"
            echo "BRANCH=${{ inputs.branch }}" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to compare against the base branch
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Checkout openMINDS_actions repository
        uses: actions/checkout@v3
        with:
          repository: openMetadataInitiative/openMINDS_actions
          ref: main
          path: openMINDS_actions # Checkout in a dedicated folder

      - name: Validate schema
        run: |
          git checkout HEAD
          git diff --name-only --diff-filter=AM HEAD^ HEAD | grep '\.json' > changed_files.txt || true
          
          validation_failed=false
          uv pip install --system -r openMINDS_actions/requirements.txt
          
          if [ -s changed_files.txt ]; then
            while IFS= read -r file; do
              validation_output=$(python openMINDS_actions/validate_schema_template.py "$file" ${{ steps.vars.outputs.REPO }} ${{ steps.vars.outputs.BRANCH }} 2>&1 || true)
              echo "$validation_output"
              
              if echo "$validation_output" | grep -iE "SyntaxError|ValueError|Error|Invalid|JSONDecodeError" > /dev/null; then
                echo "❌ Validation failed for $file"
                validation_failed=true
              else
                echo "✅ Validation passed for $file"
              fi
            done < changed_files.txt
            # If any validation failed, exit with a non-zero status
            if [ "$validation_failed" = true ]; then
              echo "❌ Some schemas failed validation."
              exit 1
            else
              echo "✅ All schemas passed validation."
            fi
          else
            echo "No schema to validate."
          fi

        shell: bash
